[curl-command]
syntax = CURL [choice:URI=<uri> OR URIFIELD=<urifield>] [optional: METHOD=<GET|PATCH|POST|PUT|DELETE> VERIFYSSL=<TRUE|FALSE> DATAFIELD=<field_name> DATA=<data> HEADERFIELD=<json_header_field_name> HEADERS=<json_header> USER=<user> PASS=<password> DEBUG=<true|false> SPLUNKAUTH=<true|false> SPLUNKPASSWDNAME=<username_in_passwordsconf> SPLUNKPASSWDCONTEXT=<appcontext (optional)> TIMEOUT=<float>] ENFORCEHTTPS=<true|false>
alias =
shortdesc = The curl command allows calling an endpoint and retrieving results
description = \
    This command allows you to run | curl either at the start of a search or within a search \
    using the GET, PATCH, POST, PUT or DELETE HTTP methods \
    The user= option can be used to pass in a username, pass= for password, or alternatively  \
    splunkpasswdname= to search the passwords.conf or the required username and use the password from it\
    headers= is used to supply headers in JSON format, this can be used to provide HTTP headers to be used, headerfield= ensures the curl command uses the named Splunk field for header data
    splunkpasswdcontext= is not required to use splunkpasswdname but can force the app context to look for the password in
comment1 = \
    GET data from uri, specifing user, pass, and very short timeout
example1 = \
    | curl method=get uri=https://localhost:8089/services/admin user=admin pass=changeme timeout=0.001 | table curl*
comment2 = \
    GET data from uri, passing existing session key
example2 = \
    | curl method=get uri=https://localhost:8089/services/admin splunkauth=true | table curl*
comment3 = \
    POST data to uri, specifying data="{\"name\":\"Test\",\"value\":\"Hello World\",\"severity\":\"warn\"}"
example3 = \
    | makeresults count=1\
    | eval data="{\"name\":\"Test\",\"value\":\"Hello World\",\"severity\":\"warn\"}" \
    | curl method=post uri=https://localhost:8089/services/messages/new splunkauth=true debug=true datafield=data \
    | table curl*
comment4 = \
    POST data to uri, using a data field that exists in the Splunk search pipeline
example4 = \
    | makeresults count=1 \
    | eval message="{\"name\":\"restart_link\",\"value\":\"Hello World\",\"severity\":\"warn\"}" \
    | curl method=post uri=https://localhost:8089/services/messages/new datafield=message splunkauth=true \
    | table curl*
comment5 = \
    Deleting fired alerts for search named "Test Alert"
example5 = \
    | rest /servicesNS/admin/search/alerts/fired\_alerts/Test%20Alert \
    | fields title \
    | head 10 \
    | map search="\
     | curl method=delete uri="https://localhost:8089/servicesNS/admin/search/alerts/fired_alerts/$title$" user=admin pass=changeme \
     | table *\
    "
comment6 = \
    Getting search results from google
example6 = \
    | curl method=get verifyssl=True uri=https://google.com/search?q=splunk debug=t
comment7 = \
    Getting multiple search results from google using data in the pipe:
example7 = \
    | makeresults count=2 \
    | eval data="q=".random() \
    | curl method=get verifyssl=false uri="https://google.com/search" datafield=data debug=true
comment8 = \
    Setting a Custom Header & Test Data
example8 = \
    | makeresults count=1  \
    | eval header="{\"content-type\":\"application/json\"}" \
    | eval data="{\"test data\":\"DATA\"}" \
    | curl method=post uri=https://localhost:8089/services user=admin pass=changeme debug=true headerfield=header datafield=data
comment9 = \
    Setting a Custom Header on a GET call
example9 = \
    | curl method=get uri=https://localhost:8089/services user=admin pass=changeme debug=true headers="{\"content-type\":\"application/json\"}"
comment10 = \
    Call localhost but retrieve the password from the password store for username example (the real password is never mentioned in this command)
example10 = \
    | curl method=get uri=https://localhost:8089/services user=example splunkpasswdname=example
example11 = \
    | curl enforcehttps=0 method=get uri=http://www.google.com/ 

category = generating,streaming
#appears-in = 1.2
usage = public
#tags = searchcommands_app

